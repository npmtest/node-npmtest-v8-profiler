{"/home/travis/build/npmtest/node-npmtest-v8-profiler/test.js":"/* istanbul instrument in package npmtest_v8_profiler */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - init-after\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - init-after\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - init-after\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-v8-profiler/lib.npmtest_v8_profiler.js":"/* istanbul instrument in package npmtest_v8_profiler */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_v8_profiler = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_v8_profiler = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-v8-profiler/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-v8-profiler && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_v8_profiler */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_v8_profiler\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // init-after\n    // run browser js-env code - init-after\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - init-after\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_v8_profiler.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_v8_profiler.rollup.js'] =\n            local.assetsDict['/assets.npmtest_v8_profiler.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_v8_profiler.__dirname + '/lib.npmtest_v8_profiler.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-v8-profiler/node_modules/v8-profiler/v8-profiler.js":"var pack = require('./package.json');\nvar binding = require('./' + [\n  'build',\n  'profiler',\n  'v' + pack.version,\n  ['node', 'v' + process.versions.modules, process.platform, process.arch].join('-'),\n  'profiler.node'\n].join('/'));\n\nvar Stream = require('stream').Stream,\n    inherits = require('util').inherits;\n\nfunction Snapshot() {}\n\nSnapshot.prototype.getHeader = function() {\n  return {\n    typeId: this.typeId,\n    uid: this.uid,\n    title: this.title\n  }\n}\n\n/**\n * @param {Snapshot} other\n * @returns {Object}\n */\nSnapshot.prototype.compare = function(other) {\n  var selfHist = nodesHist(this),\n      otherHist = nodesHist(other),\n      keys = Object.keys(selfHist).concat(Object.keys(otherHist)),\n      diff = {};\n\n  keys.forEach(function(key) {\n    if (key in diff) return;\n\n    var selfCount = selfHist[key] || 0,\n        otherCount = otherHist[key] || 0;\n\n    diff[key] = otherCount - selfCount;\n  });\n\n  return diff;\n};\n\nfunction ExportStream() {\n  Stream.Transform.call(this);\n  this._transform = function noTransform(chunk, encoding, done) {\n    done(null, chunk);\n  }\n}\ninherits(ExportStream, Stream.Transform);\n\n/**\n * @param {Stream.Writable|function} dataReceiver\n * @returns {Stream|undefined}\n */\nSnapshot.prototype.export = function(dataReceiver) {\n  dataReceiver = dataReceiver || new ExportStream();\n\n  var toStream = dataReceiver instanceof Stream,\n      chunks = toStream ? null : [];\n\n  function onChunk(chunk, len) {\n    if (toStream) dataReceiver.write(chunk);\n    else chunks.push(chunk);\n  }\n\n  function onDone() {\n    if (toStream) dataReceiver.end();\n    else dataReceiver(null, chunks.join(''));\n  }\n\n  this.serialize(onChunk, onDone);\n\n  return toStream ? dataReceiver : undefined;\n};\n\nfunction nodes(snapshot) {\n  var n = snapshot.nodesCount, i, nodes = [];\n  for (i = 0; i < n; i++) {\n    nodes[i] = snapshot.getNode(i);\n  }\n  return nodes;\n};\n\nfunction nodesHist(snapshot) {\n  var objects = {};\n  nodes(snapshot).forEach(function(node){\n    var key = node.type === \"Object\" ? node.name : node.type;\n    objects[key] = objects[node.name] || 0;\n    objects[key]++;\n  });\n  return objects;\n};\n\nfunction CpuProfile() {}\n\nCpuProfile.prototype.getHeader = function() {\n  return {\n    typeId: this.typeId,\n    uid: this.uid,\n    title: this.title\n  }\n}\n\nCpuProfile.prototype.export = function(dataReceiver) {\n  dataReceiver = dataReceiver || new ExportStream();\n\n  var toStream = dataReceiver instanceof Stream;\n  var error, result;\n\n  try {\n    result = JSON.stringify(this);\n  } catch (err) {\n    error = err;\n  }\n\n  process.nextTick(function() {\n    if (toStream) {\n      if (error) {\n        dataReceiver.emit('error', error);\n      }\n\n      dataReceiver.end(result);\n    } else {\n      dataReceiver(error, result);\n    }\n  });\n\n  return toStream ? dataReceiver : undefined;\n};\n\nvar startTime, endTime;\nvar activeProfiles = [];\n\nvar profiler = {\n  /*HEAP PROFILER API*/\n\n  get snapshots() { return binding.heap.snapshots; },\n\n  takeSnapshot: function(name, control) {\n    if (typeof name == 'function') {\n      control = name;\n      name = '';\n    }\n\n    if (typeof control !== 'function') {\n      control = function noop() {};\n    }\n\n    name = '' + name;\n\n    var snapshot = binding.heap.takeSnapshot(name, control);\n    snapshot.__proto__ = Snapshot.prototype;\n    snapshot.title = name;\n    return snapshot;\n  },\n\n  deleteAllSnapshots: function () {\n    Object.keys(binding.heap.snapshots).forEach(function(key) {\n      binding.heap.snapshots[key].delete();\n    });\n  },\n\n  startTrackingHeapObjects: function() {\n    binding.heap.startTrackingHeapObjects();\n  },\n\n  stopTrackingHeapObjects: function() {\n    binding.heap.stopTrackingHeapObjects();\n  },\n\n  getHeapStats: function(iterator, callback) {\n    if (typeof iterator !== 'function')\n      iterator = function noop() {};\n\n    if (typeof callback !== 'function')\n      callback = function noop() {};\n\n    return binding.heap.getHeapStats(iterator, callback)\n  },\n\n  getObjectByHeapObjectId: function(id) {\n    id = parseInt(id, 10);\n    if (isNaN(id)) return;\n\n    return binding.heap.getObjectByHeapObjectId(id);\n  },\n\n  getHeapObjectId: function(value) {\n    if (!arguments.length) return;\n    return binding.heap.getHeapObjectId(value);\n  },\n\n  /*CPU PROFILER API*/\n\n  get profiles() { return binding.cpu.profiles; },\n\n  startProfiling: function(name, recsamples) {\n    if (activeProfiles.length == 0 && typeof process._startProfilerIdleNotifier == \"function\")\n      process._startProfilerIdleNotifier();\n\n    if (typeof name == 'boolean') {\n      recsamples = name;\n      name = '';\n    }\n\n    recsamples = recsamples === undefined ? true : Boolean(recsamples);\n    name = '' + name;\n\n    if (activeProfiles.indexOf(name) < 0)\n      activeProfiles.push(name)\n\n    startTime = Date.now();\n    binding.cpu.startProfiling(name, recsamples);\n  },\n\n  stopProfiling: function(name) {\n    var index = activeProfiles.indexOf(name);\n    if (name && index < 0)\n      return;\n\n    var profile = binding.cpu.stopProfiling(name);\n    endTime = Date.now();\n    profile.__proto__ = CpuProfile.prototype;\n    if (!profile.startTime) profile.startTime = startTime;\n    if (!profile.endTime) profile.endTime = endTime;\n\n    if (name)\n      activeProfiles.splice(index, 1);\n    else\n      activeProfiles.length = activeProfiles.length - 1;\n\n    if (activeProfiles.length == 0 && typeof process._stopProfilerIdleNotifier == \"function\")\n      process._stopProfilerIdleNotifier();\n\n    return profile;\n  },\n\n  setSamplingInterval: function(num) {\n    if (activeProfiles.length) {\n      throw new Error('setSamplingInterval must be called when there are no profiles being recorded.');\n    }\n\n    num = parseInt(num, 10) || 1000;\n    binding.cpu.setSamplingInterval(num);\n  },\n\n  deleteAllProfiles: function() {\n    Object.keys(binding.cpu.profiles).forEach(function(key) {\n      binding.cpu.profiles[key].delete();\n    });\n  }\n};\n\nmodule.exports = profiler;\nprocess.profiler = profiler;\n","/home/travis/build/npmtest/node-npmtest-v8-profiler/node_modules/v8-profiler/tools/annotate-tag.js":"'use strict';\n\nconst co = require('co');\nconst exec = require('./exec');\n\nmodule.exports = co.wrap(function * (version) {\n  const history = yield require('./history')(version);\n  const tagname = 'v' + version;\n\n  return yield exec('git tag -a \"' + tagname + '\" -m \"' + history + '\"');\n});\n","/home/travis/build/npmtest/node-npmtest-v8-profiler/node_modules/v8-profiler/tools/exec.js":"'use strict';\n\nconst exec = require('child_process').exec;\n\nmodule.exports =\n  (expression) => new Promise(\n  (resolve, reject) => exec(expression,\n  (error, result) => error ? reject(error) : resolve(String(result).trim())\n));\n","/home/travis/build/npmtest/node-npmtest-v8-profiler/node_modules/v8-profiler/tools/commit-changes.js":"'use strict';\n\nconst exec = require('./exec');\nconst changed = [/*'ChangeLog.md',*/ 'package.json'].join(' ');\n\nmodule.exports =\n  (version) => exec('git commit -m \"' + version + '\" ' + changed);\n","/home/travis/build/npmtest/node-npmtest-v8-profiler/node_modules/v8-profiler/tools/history.js":"'use strict';\n\nconst co = require('co');\nconst exec = require('./exec');\n\nmodule.exports = co.wrap(function * () {\n  const _lasttag = yield exec('git rev-list --tags --max-count=1');\n  const _version = yield exec('git describe --tags --abbrev=0 ' + _lasttag);\n  const version = _version ? ' ' + _version + '..' : '';\n\n  return ' ' + (yield exec('git log --no-merges --pretty=\"format: * %s (%an) %H%n\"' + version));\n});\n","/home/travis/build/npmtest/node-npmtest-v8-profiler/node_modules/v8-profiler/tools/NODE_NEXT.js":"return module.exports = process.versions.modules > 45;\n","/home/travis/build/npmtest/node-npmtest-v8-profiler/node_modules/v8-profiler/tools/prepublish-to-npm.js":"'use strict';\n\nconst co = require('co');\nconst rimraf = require('rimraf');\nconst gyp = require('node-pre-gyp');\nconst versions = ['0.10.0', '0.12.0', '4.0.0', '5.0.0', '6.0.0'];\nconst matrix = {\n  x64: ['win32', 'linux', 'darwin'],\n  ia32: ['win32']\n};\n\nclass Target {\n  constructor(arch, platform, version) {\n    this.target = version;\n    this.target_platform = platform;\n    this.target_arch = arch;\n  }\n}\n\nconst install = target => new Promise((resolve, reject) => {\n  const prog = Object.assign(new gyp.Run(), {opts: target});\n\n  prog.commands.install([], error => error ? reject(error) : resolve());\n});\n\nmodule.exports = co.wrap(function * () {\n  rimraf.sync('./build');\n\n  const targets = [];\n  Object.keys(matrix).forEach(\n    (arch) => matrix[arch].forEach(\n    (platform) => versions.forEach(\n    (version) => targets.push(new Target(arch, platform, version))\n  )));\n\n  while (targets.length) yield install(targets.pop());\n});\n","/home/travis/build/npmtest/node-npmtest-v8-profiler/node_modules/v8-profiler/tools/publish-to-npm.js":"'use strict';\n\nconst exec = require('./exec');\n\nmodule.exports =\n  (version) => exec('npm publish');\n","/home/travis/build/npmtest/node-npmtest-v8-profiler/node_modules/v8-profiler/tools/push-to-githab.js":"'use strict';\n\nconst exec = require('./exec');\n\nmodule.exports =\n  (version) => exec('git push && git push origin \"v' + version + '\"');\n","/home/travis/build/npmtest/node-npmtest-v8-profiler/node_modules/v8-profiler/tools/release.js":"'use strict';\n\nconst co = require('co');\nconst args = process.argv.slice(2);\nconst version = args.splice(0, 1);\n\nconst npm = require('./update-npm-version');\nconst changelog = require('./update-changelog');\nconst tag = require('./annotate-tag');\nconst commit = require('./commit-changes');\nconst push = require('./push-to-githab');\n\nconst prepublish = require('./prepublish-to-npm');\nconst publish = require('./publish-to-npm');\n\nconst EXAMPLE = ' Example:\\n' +\n  'node release.js 1.0.0 --build\\n' +\n  'node release.js 1.0.0 --publish'\n\nconst SEMVER = /^\\d+(\\.\\d+(\\.\\d+(-.*)?)?(-.*)?)?(-.*)?$/;\n\nconsole.assert(version, 'Wrong usage.' + EXAMPLE);\nconsole.assert(SEMVER.test(version), version + ' is not correct semver');\n\nconst BUILD = args.some(\n  (arg) => /^(-b|--build)$/.test(arg));\n\nconst PUBLISH = args.some(\n  (arg) => /^(-p|--publish)$/.test(arg));\n\nconsole.assert(BUILD || PUBLISH, 'No mode selected.' + EXAMPLE);\n\nreturn co(function * () {\n  if (BUILD) {\n    console.log('--Update the version in package.json--');\n    yield npm(version);\n\n    // TODO: enable changelog on 1.0 version\n    // console.log('--Update ChangeLog.md--');\n    // changelog();\n\n    console.log('--Commit the changes--');\n    yield commit(version);\n\n    console.log('--Tag the release--')\n    yield tag(version);\n\n    console.log('--Push to github--');\n    yield push(version);\n  } else if (PUBLISH) {\n    console.log('--Download prebuilt binaries--');\n    yield prepublish();\n\n    console.log('--Publish to npm--');\n    yield publish();\n  }\n}).catch((error) => {\n  console.error(error.stack);\n  return process.exit(1);\n});\n","/home/travis/build/npmtest/node-npmtest-v8-profiler/node_modules/v8-profiler/tools/update-changelog.js":"var fs = require('fs');\nvar exists = fs.existsSync;\nvar read = fs.readFileSync;\nvar write = fs.writeFileSync;\n\nvar history = require('./history');\n\nmodule.exports = function changelog(filename) {\n  filename = filename || 'CHANGELOG.md';\n\n  var _changelog = exists(filename) ? read(filename) : '';\n  var _history = history();\n\n  write(filename, _history + '\\n' + _changelog);\n};\n\n//test -n \"$EDITOR\" && $EDITOR $CHANGELOG\n","/home/travis/build/npmtest/node-npmtest-v8-profiler/node_modules/v8-profiler/tools/update-npm-version.js":"'use strict';\n\nconst exec = require('./exec');\n\nmodule.exports =\n  (version) => exec('npm version --git-tag-version=false \"' + version + '\"');\n"}